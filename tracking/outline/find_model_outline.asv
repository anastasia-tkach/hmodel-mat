function [outline3D] = find_model_outline(centers, radii, blocks, palm_blocks, fingers_blocks, fingers_base_centers, camera_ray, names_map, verbose)

%% Compute palm outline
[palm_outline] = find_planar_outline(centers, palm_blocks, radii, verbose);

final_outline = [];
for f = 1:length(fingers_blocks)
    %% Compute finger outline
    [finger_outline] = find_planar_outline(centers, fingers_blocks{f}, radii, verbose);
    
    %% Find common outline between palm and finger
    finger_index = -1; palm_index = -1;
    for i = 1:length(finger_outline)
        if finger_outline{i}.indices == fingers_base_centers(f)
            finger_index = i;
            break;
        end
    end
    for i = 1:length(palm_outline)
        if palm_outline{i}.indices == fingers_base_centers(f)
            palm_index = i;
            break;
        end
    end    
    if palm_index ~= -1 && finger_index ~= -1        
        intersections = intersect_segment_segment_same_circle(centers{palm_outline{palm_index}.indices}, radii{palm_outline{palm_index}.indices}, camera_ray, ...
            palm_outline{palm_index}.start, palm_outline{palm_index}.end, finger_outline{finger_index}.start, finger_outline{finger_index}.end);        
        for k = 1:length(intersections)
            intersections{k}.indices = fingers_base_centers(f);
            finger_outline{end + 1} = intersections{k};
        end
    end    
    if palm_index ~= -1, palm_outline(palm_index) = []; end
    if finger_index ~= -1, finger_outline(finger_index) = []; end
    final_outline = [final_outline, finger_outline];
    
end
final_outline = [final_outline, palm_outline];

%% Adjust some edges
% crop_indices = {[names_map('thumb_bottom'), names_map('thumb_middle')]};
% limits_indices = {[names_map('thumb_bottom'), names_map('thumb_fold')]};
crop_indices = {[names_map('pinky_base'), names_map('pinky_bottom')], [names_map('ring_base'), names_map('ring_bottom')], ...
    [names_map('middle_base'), names_map('middle_bottom')], [names_map('index_base'), names_map('index_bottom')],};
limits_indices = {[names_map('pinky_membrane'), names_map('ring_membrane')], [names_map('ring_membrane'), names_map('middle_membrane')], ...
    [names_map('middle_membrane'), names_map('index_membrane')]};
for i = 1:length(crop_indices)
    [l1, l2, r1, r2] = get_tangents(c1, c2, r1, r2);
end
crop_outline_indices = [];
limits_outline_indices = [];
crop_indices_map = {};
for i = 1:length(final_outline)
    for j = 1:length(crop_indices)
        if all(ismember(final_outline{i}.indices, crop_indices{j}))
            crop_outline_indices(end + 1) = i;
            crop_indices_map{end + 1} = crop_indices{j};
        end
    end
    for j = 1:length(limits_indices)
        if all(ismember(final_outline{i}.indices, limits_indices{j}))
            limits_outline_indices(end + 1) = i;
        end
    end
end

for i = 1:length(crop_outline_indices)
    for j = 1:length(limits_outline_indices)
        t = intersect_segment_segment(final_outline{crop_outline_indices(i)}.start, final_outline{crop_outline_indices(i)}.end, ...
            final_outline{limits_outline_indices(j)}.start, final_outline{limits_outline_indices(j)}.end);
        if ~isempty(t), 
            final_outline{crop_outline_indices(i)} = crop_outline_segment(t, centers{crop_indices_map{i}(1)}, centers{crop_indices_map{i}(2)}, ...
                radii{crop_indices_map{i}(1)}, radii{crop_indices_map{i}(2)}, final_outline{crop_outline_indices(i)});
            %final_outline{indices2(j)} = crop_outline_segment(t, centers{i2}, centers{j2}, radii{i2}, radii{j2}, final_outline{indices2(j)});
        end
    end
end

%% Find 3D outline
[outline3D] = find_3D_outline(centers, final_outline);

%% Display
if ~verbose, return; end

display_result(centers, [], [], blocks, radii, false, 0.5, 'small');

for i = 1:length(outline3D)
    if length(outline3D{i}.indices) == 2
        myline(outline3D{i}.start, outline3D{i}.end, 'm');
    else
        draw_circle_sector_in_plane(centers{outline3D{i}.indices}, radii{outline3D{i}.indices}, camera_ray, outline3D{i}.start, outline3D{i}.end, 'm');
    end
end

view([0, 90]);
