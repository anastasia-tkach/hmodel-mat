clear;
close all;
clc;
D = 3;
mode = 'tracking';
verbose = false;
semantics_path = '_my_hand/semantics/';
input_path = '_my_hand/fitting_result/';
output_path = '_my_hand/tracking_initialization/';
sensor_path = 'C:/Users/tkach/Desktop/training/';

%% Load data
load([input_path, 'radii.mat']);
load([input_path, 'centers.mat']);

%% Remove wrist
[blocks, named_blocks, names_map] = remove_wrist(semantics_path);

%% Load htrack data
K = 360;
[beta, theta] = load_htrack_data(sensor_path, output_path, K, D);

%% Rigid transformation
if verbose, figure; hold on; axis off; axis equal; end
segments = create_ik_model('hand');
[segments, joints] = pose_ik_model(segments, theta, verbose, 'hand');
[htrack_centers, htrack_radii, htrack_blocks, ~, ~] = make_convolution_model(segments, 'hand');

[centers, radii] = find_htrack_hmodel_transformation(centers, radii, beta, names_map, verbose, D);

%% Compute principal axis of the palm
key_points_names = {'palm_pinky', 'palm_ring', 'palm_middle', 'palm_index', 'palm_back', 'palm_attachment', 'palm_right', 'palm_back', 'palm_left'};
[centers, htrack_centers] = aling_htrack_hmodel_frames(centers, htrack_centers, names_map, key_points_names, verbose, D);

%% Find non-ri


%% Display data
tx = 640 / 4; ty = 480 / 4; fx = 287.26; fy = 287.26;
filename = [sensor_path, sprintf('%3.7d', K-1), '.png']; D = imread(filename);
filename = [sensor_path, 'mask_', sprintf('%3.7d', K-1), '.png']; M = imread(filename);
D(M == 0) = 0;
[U, V] = meshgrid(1:size(D, 2), 1:size(D, 1));
UVD = zeros(size(D, 1), size(D, 2), 3);
UVD(:, :, 1) = U; UVD(:, :, 2) = V; UVD(:, :, 3) = D;
uvd = reshape(UVD, size(UVD, 1) * size(UVD, 2), 3)';
I = convert_uvd_to_xyz(tx, ty, fx, fy, uvd);

data_points = {};
for i = 1:size(I, 2)
    if ~any(isnan(I(:, i))), data_points{end + 1} = I(:, i); end
end

%% Filter datapoints
figure; axis off; axis equal; hold on;
mypoints(data_points, 'r');
gaussian_filter = fspecial('gaussian', 3, 1);
depth_image = reshape(I, 3, ty * 2, tx * 2);
depth_image = shiftdim(depth_image, 1);
mask = zeros(ty * 2, tx * 2);
mask(depth_image(:, :, 3) > 0) = 1;
depth = depth_image(:, :, 3);
max_depth = max(depth(:));
depth = depth ./ max_depth;
depth = bfilter2(depth, 5, [2 0.1]);
depth = depth .* max_depth;
depth_image(:, :, 3) = depth;
depth_image = shiftdim(depth_image, 2);
I2 = reshape(depth_image, 3, ty * 2 * tx * 2);

data_points = {};
for i = 1:size(I2, 2)
    if ~any(isnan(I2(:, i)))
        data_points{end + 1} = I2(:, i);
    end
end
mypoints(data_points, 'b');

%% Save the data
save([output_path, 'centers.mat'], 'centers');
save([output_path, 'radii.mat'], 'radii');
save([output_path, 'data_points.mat'], 'data_points');
save([output_path, 'theta.mat'], 'theta');

