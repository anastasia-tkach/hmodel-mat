clear all; close all;

D = 3;

[centers, radii, blocks] = get_random_convtriangle();
radii{1} = 0.19; radii{2} = 0.2; radii{3} = 0.21;

centers{4} = mean([centers{1}, centers{2}, centers{3}], 2);
centers{5} = centers{4} + 2 * cross(centers{2} - centers{1}, centers{3} - centers{1});
radii{4} = 0.15; radii{5} = 0.1;
blocks{2} = [4, 5];
attachments{4}.block_index = 1;
attachments{5}.block_index = 1;

initial_frames = compute_model_frames(centers, blocks, blocks{1});

%% Display results
figure; axis off; axis equal; hold on;
display_skeleton(centers, radii, blocks, [], false);

%% Compute attachment weights
for i = 1:length(attachments)
    if isempty(attachments{i}), continue; end
    
    indices = blocks{attachments{i}.block_index};
    [~, projections, ~] = compute_skeleton_projections({centers{i}}, centers, {indices});
    attachments{i}.axis_projection = projections{1};   
    
    P = [centers{indices(1)}'; centers{indices(2)}'; centers{indices(3)}'; attachments{i}.axis_projection'];
    attachments{i}.weights = [P(4,:),1]/[P(1:3,:),ones(3,1)];
    
    attachments{i}.offset = centers{i}  - attachments{i}.axis_projection;
    attachments{i}.centers = centers(indices);
end

initial_centers = centers;

%% Generate model
rotation_axis = randn(D, 1);
rotation_angle = 4 * randn;
translation_vector = - rand * [0; 0; 1];
R = makehgtform('axisrotate', rotation_axis, rotation_angle);
T = makehgtform('translate', translation_vector);
for i = 1:length(centers)
    centers{i} = transform(centers{i}, R);
    centers{i} = transform(centers{i}, T);
end
frames = compute_model_frames(centers, blocks, blocks{1});

%% Move attachments
for o = 1:length(attachments)
    if isempty(attachments{o}), continue; end
    attachments{o}.axis_projection = zeros(D, 1);
    indices = blocks{attachments{o}.block_index};
    for l = 1:indices
        attachments{o}.axis_projection = attachments{o}.axis_projection + attachments{o}.weights(l) * centers{attachments{o}.indices(l)};
    end
    rotation = find_svd_rotation(attachments{o}.centers, centers(attachments{o}.indices));
    centers{o} = attachments{o}.axis_projection + rotation' * attachments{o}.offset;
end

T2 = T;
T2(1:3, 4) = - T(1:3, 4);
R2 = eye(4, 4); 
R2(1:3, 1:3) = rotation;
for i = 1:length(centers)
    centers{i} = transform(centers{i}, T2);
    centers{i} = transform(centers{i}, R2);    
end

%% Display results
display_skeleton(centers, radii, blocks, [], false);
display_skeleton(initial_centers, radii, blocks, [], false);
